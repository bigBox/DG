{
  "ver": "1.0.25",
  "uuid": "04e0e07f-a4e7-43e0-88f4-4157f05b7f07",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float outlineWidth;\nbool checkIsisShow(vec2 pos,float i){\n  float alpha = 0.5;\n  vec4 color = texture2D(texture, pos);\n  color = texture2D(texture, pos + vec2(0, i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(i*0.001, i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(i*0.001, 0));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(i*0.0001, -i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(0, -i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(-i*0.001, -i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(-i*0.001, 0));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(-i*0.001, i*0.001));\n  if(color.a > alpha)return true;\n color = texture2D(texture, pos);\n  if((pos.x <= outlineWidth || pos.x >= 1.0 - outlineWidth)&&color.a>alpha)return true;\n  if((pos.y <= outlineWidth || pos.y >= 1.0 - outlineWidth)&&color.a>alpha)return true;\n    return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float alpha = 0.6 ;\nvec4 color = texture2D(texture, v_uv0);\nif(color.a <= alpha){\n for(float i = 1.0 ; i<10.0; i++){\n    if(checkIsisShow(v_uv0,i)){\n     o = vec4(0, 0, 0, (10.0-i)*0.03);\n      break;\n    }\n  }\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform InputData{\n  float outlineWidth;\n};\nbool checkIsisShow(vec2 pos,float i){\n  float alpha = 0.5;\n  vec4 color = texture(texture, pos);\n  color = texture2D(texture, pos + vec2(0, i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(i*0.001, i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(i*0.001, 0));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(i*0.0001, -i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(0, -i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(-i*0.001, -i*0.001));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(-i*0.001, 0));\n  if(color.a > alpha)return true;\n  color = texture2D(texture, pos + vec2(-i*0.001, i*0.001));\n  if(color.a > alpha)return true;\n color = texture(texture, pos);\n  if((pos.x <= outlineWidth || pos.x >= 1.0 - outlineWidth)&&color.a>alpha)return true;\n  if((pos.y <= outlineWidth || pos.y >= 1.0 - outlineWidth)&&color.a>alpha)return true;\n    return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float alpha = 0.6 ;\nvec4 color = texture(texture, v_uv0);\nif(color.a <= alpha){\n for(float i = 1.0 ; i<10.0; i++){\n    if(checkIsisShow(v_uv0,i)){\n     o = vec4(0, 0, 0, (10.0-i)*0.03);\n      break;\n    }\n  }\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}